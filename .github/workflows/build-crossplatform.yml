name: Cross-Platform C Build

on: push

env:
  QEMU_IMAGE: tonistiigi/binfmt:qemu-v5.0.1
  BUILD_JDK: 11
  VERSION_SUFFIX: ''
  OPENSSL_URL_PREFIX: "https://github.com/openssl4j/openssl-crossplatform/releases/download/v20240217200647/openssl"
#  OPENSSL_URL: https://github.com/openssl4j/openssl-crossplatform/releases/download/v20240217200647/openssl-linux_386-3.0.8-fips.tar.gz

jobs:

  #
  # build the different platforms using QEMU
  #
  qemu_platform_object_files:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        openssl:
          - version: '3.0.8'
            name: fips
          - version: '3.2.1'
            name: plain
        os:
          - platform: linux/amd64
            tag: linux_amd64
          - platform: linux/arm64
            tag: linux_arm64
          # - platform: linux/s390x
          - platform: linux/s390x
            tag: linux_s390x
          - platform: linux/arm/v7
            tag: linux_arm_v7
          #- platform: linux/arm/v6
          # - platform: linux/ppc64le
          #   tag: linux_ppc64le
          #- platform: linux/riscv64
          #- platform: linux/386
          #- platform: linux/mips64le
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Set up QEMU for ${{ matrix.platform }}
        id: qemu
        uses: docker/setup-qemu-action@v3
        with:
          image: ${{ env.QEMU_IMAGE }}
          platforms: ${{ matrix.platform }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      -
        name: Build os tag ${{ matrix.os.tag }}, openssl version ${{ matrix.openssl.version}}, openssl name ${{ matrix.openssl.name }}
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: ${{ matrix.platform }}
          outputs: "type=tar,dest=image.tar"
          build-args: |
            "OPENSSL_VERSION=${{ matrix.openssl.version }}"
            "OPENSSL_NAME=${{ matrix.openssl.name }}"
            "OPENSSL_URL=${{ env.OPENSSL_URL_PREFIX }}-${{ matrix.os.tag }}-${{ matrix.openssl.version }}-${{ matrix.openssl.name }}.tar.gz"
      -
        name: Show it
        run: |
          ls -alR image.tar
          tar -tvf image.tar
          
      -
        name: Extract shared library
        run: |
          tar --wildcards -xvf image.tar openssl4j/openssl4j_build/openssl4j/c/libopenssl4j-*.so

      - uses: actions/upload-artifact@v4
        with:
          name: shared_objects_${{ matrix.artifact }}
          path: openssl4j/openssl4j_build/openssl4j/c/libopenssl4j-*.so

  #
  # deploy the openssl4j-objects artifact to github packages
  #          
  deploy_openssl4j_objects:
    needs: qemu_platform_object_files
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      - 
        uses: actions/download-artifact@v4
        with:
          pattern: shared_objects_*
          merge-multiple: true
          path: openssl4j-objects/src/main/resources/objects
      -
        name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'adopt'
          java-version: ${{ env.BUILD_JDK }}
      -
        name: Cache local Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      -
        name: Set by-date version with Maven
        run: mvn versions:set -DnewVersion=$(date +"%Y-%m-%d-%H-%M-%S")${{ env.VERSION_SUFFIX }}
        working-directory: openssl4j-objects
      - 
        name: Build with Maven
        run: mvn -B package --file pom.xml
        working-directory: openssl4j-objects

      -
        uses: actions/upload-artifact@v4
        with:
          name: openssl4j-objects
          path: openssl4j-objects/target/*.jar
      -
        name: Publish package to Github
        run: mvn -Pgithub --batch-mode deploy
        working-directory: openssl4j-objects
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
